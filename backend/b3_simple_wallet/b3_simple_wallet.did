type AccountsNonce = record {
  staging : nat64;
  production : nat64;
  development : nat64;
};
type BitcoinError = variant {
  InvalidAddress : text;
  PublicKeyError : text;
  NoUtxos;
  InsufficientBalance : record { nat64; nat64 };
  InvalidFeePercentile : text;
  GetBalance : text;
  FeeTooHigh : record { nat64; nat64 };
  InvalidPublicKey : text;
  GetFeeRate : text;
  GetCurrentFeePercentiles : text;
  InvalidChain : text;
  Signature : text;
  InvalidNetworkAddress : text;
  GetUtxos : text;
  SendRawTransaction : text;
  SendTransaction : text;
  SwapToCkbtc : text;
};
type BtcChain = record {
  pendings : vec BtcPending;
  subaccount : vec nat8;
  ecdsa_public_key : vec nat8;
  address : text;
  btc_network : Minter;
  min_confirmations : opt nat32;
};
type BtcNetwork = variant { Mainnet; Regtest; Testnet };
type BtcPending = record { txid : text; account : text };
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type Chain = variant {
  EvmChain : EvmChain;
  BtcChain : BtcChain;
  IcpChain : IcpChain;
  IcrcChain : IcrcChain;
  CkbtcChain : CkbtcChain;
};
type ChainEnum = variant {
  BTC : Minter;
  EVM : nat64;
  ICP;
  ICRC : principal;
  CKBTC : Minter;
};
type CkbtcChain = record {
  fee : opt nat;
  pendings : vec CkbtcPending;
  memo : opt vec nat8;
  minter : Minter;
  ledger : principal;
  account : ICRCAccount;
  created_at_time : opt nat64;
};
type CkbtcError = variant {
  RetrieveBtcStatus : RetrieveBtcStatus;
  MinterError : MinterError;
  SendToInvalidAddress : text;
  UpdateBalanceError : UpdateBalanceError;
  IcrcError : IcrcError;
  CkbtcGetBtcAddressError : text;
  CkbtcSwapToBtcError : text;
  ICRC1TransferError : ICRC1TransferError;
};
type CkbtcPending = record { block_index : nat64; txid : opt nat };
type Controller = record { id : principal; name : text };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type Environment = variant { Production; Development; Staging };
type EvmChain = record {
  pendings : vec EvmPending;
  chain_id : nat64;
  address : text;
};
type EvmError = variant {
  InvalidMessage : text;
  InvalidAddress : text;
  InvalidSignature : text;
  InvalidPublicKey : text;
  InvalidRecoveryId : text;
  InvalidTransactionType;
  NotSignedTransaction;
};
type EvmPending = record { block_index : nat64 };
type HelperError = variant {
  CreateCanisterError : text;
  UpdateCanisterControllersError : text;
  ValidateSignerError : text;
  InvalidSubaccount : text;
  EncodeError : text;
  InvalidAccountIdentifier;
  RateLimitExceeded;
  WasmHashError : text;
  VersionError : text;
  SignerNotAvailable;
  InstallCodeError : text;
  CanisterStatusError : text;
  InvalidReleaseName : text;
};
type ICRC1MetadataValue = variant {
  Int : int;
  Nat : nat;
  Blob : vec nat8;
  Text : text;
};
type ICRC1TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type ICRCAccount = record { owner : principal; subaccount : opt vec nat8 };
type ICRCAccountError = variant {
  BadChecksum;
  InvalidFormat;
  InvalidSubaccount : text;
  InvalidPrincipal : text;
  Malformed : text;
  NotCanonical;
  HexDecode : text;
};
type IcpChain = record {
  fee : Tokens;
  pendings : vec IcpPending;
  memo : nat64;
  subaccount : vec nat8;
  created_at_time : opt Timestamp;
};
type IcpError = variant {
  TransferError : TransferError;
  TopUpPending : text;
  CallError : text;
  NotifyError : NotifyError;
};
type IcpPending = record { block_index : nat64; canister_id : text };
type IcrcChain = record {
  fee : opt nat;
  metadata : vec record { text; ICRC1MetadataValue };
  pendings : vec IcrcPending;
  memo : opt vec nat8;
  canister_id : principal;
  subaccount : vec nat8;
  created_at_time : opt nat64;
};
type IcrcError = variant {
  UpdateBalanceError : UpdateBalanceError;
  CallError : text;
  ICRC1TransferError : ICRC1TransferError;
};
type IcrcPending = record { tx_index : nat; block_index : nat64 };
type Ledger = record {
  public_key : opt vec nat8;
  subaccount : vec nat8;
  chains : vec record { ChainEnum; Chain };
};
type LedgerError = variant {
  InvalidMessageLength;
  SignatureError : text;
  ICRCAccountError : ICRCAccountError;
  EvmError : EvmError;
  IcpError : IcpError;
  PublicKeyError : text;
  UpdateBalanceError : text;
  InvalidEcdsaPublicKey;
  BitcoinError : BitcoinError;
  GenerateError : text;
  IcrcError : IcrcError;
  MissingEcdsaPublicKey;
  PendingIndexError : nat64;
  MissingAddress;
  BtcTxIdError : text;
  CallError : text;
  InvalidChain;
  EcdsaPublicKeyError : text;
  CkbtcError : CkbtcError;
  EcdsaPublicKeyAlreadySet;
};
type Minter = variant { Mainnet; Regtest; Testnet };
type MinterError = variant {
  RetrieveBtcStatus : RetrieveBtcStatus;
  UpdateBalanceError : UpdateBalanceError;
  CallError : text;
  RetrieveBtcError : RetrieveBtcError;
  GetWithdrawalAccountError : text;
  GetBtcAddressError : text;
};
type NotifyError = variant {
  TxTooOld : record { allowed_window_nanos : nat64 };
  Refunded : record { block_index : opt nat64; reason : text };
  InvalidTransaction : text;
  BadFee : record { expected_fee : Tokens };
  TxDuplicate : record { duplicate_of : nat64 };
  Other : record { error_message : text; error_code : nat64 };
  Processing;
  TxCreatedInFuture;
  TransactionTooOld : nat64;
  InsufficientFunds : record { balance : Tokens };
};
type OutPoint = record { txid : vec nat8; vout : nat32 };
type PendingEnum = variant {
  IcrcPending : IcrcPending;
  BtcPending : BtcPending;
  CkbtcPending : CkbtcPending;
  EvmPending : EvmPending;
  IcpPending : IcpPending;
};
type Result = variant { Ok : nat64; Err : TransferError };
type Result_1 = variant { Ok : nat; Err : text };
type Result_2 = variant { Ok : vec principal; Err : WalletError };
type RetrieveBtcError = variant {
  MalformedAddress : text;
  GenericError : record { error_message : text; error_code : nat64 };
  TemporarilyUnavailable : text;
  AlreadyProcessing;
  AmountTooLow : nat64;
  InsufficientFunds : record { balance : nat64 };
};
type RetrieveBtcStatus = variant {
  Signing;
  Confirmed : record { txid : vec nat8 };
  Sending : record { txid : vec nat8 };
  AmountTooLow;
  Unknown;
  Submitted : record { txid : vec nat8 };
  Pending;
};
type SendResult = variant {
  BTC : text;
  EVM;
  ICP : Result;
  ICRC : nat;
  CKBTC : nat;
};
type Timestamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type TransferError = variant {
  TxTooOld : record { allowed_window_nanos : nat64 };
  BadFee : record { expected_fee : Tokens };
  TxDuplicate : record { duplicate_of : nat64 };
  TxCreatedInFuture;
  InsufficientFunds : record { balance : Tokens };
};
type UpdateBalanceError = variant {
  GenericError : record { error_message : text; error_code : nat64 };
  TemporarilyUnavailable : text;
  AlreadyProcessing;
  NoNewUtxos : record {
    required_confirmations : nat32;
    current_confirmations : opt nat32;
  };
};
type Utxo = record { height : nat32; value : nat64; outpoint : OutPoint };
type UtxoStatus = variant {
  ValueTooSmall : Utxo;
  Tainted : Utxo;
  Minted : record { minted_amount : nat64; block_index : nat64; utxo : Utxo };
  Checked : Utxo;
};
type WalletAccount = record {
  id : text;
  metadata : vec record { text; text };
  name : text;
  hidden : bool;
  ledger : Ledger;
};
type WalletAccountView = record {
  id : text;
  metadata : vec record { text; text };
  pendings : vec PendingEnum;
  name : text;
  hidden : bool;
  addresses : vec record { ChainEnum; text };
  environment : Environment;
};
type WalletCanisterStatus = record {
  name : text;
  canister_id : principal;
  status_at : nat64;
  version : text;
  canister_status : CanisterStatusResponse;
  account_status : AccountsNonce;
};
type WalletError = variant {
  CannotRemoveDefaultAccount;
  UpdateCanisterControllersError : text;
  WalletAccountNotExists;
  HelperError : HelperError;
  WalletAlreadyInitialized;
  EvmError : EvmError;
  IcpError : IcpError;
  UnknownError;
  BitcoinError : BitcoinError;
  IcrcError : IcrcError;
  NotifyTopUpError : text;
  ControllerAlreadyExists;
  SignerAlreadyExists : text;
  WalletAccountAlreadyExists;
  SignerDoesNotExist : text;
  LedgerError : LedgerError;
  UpdateSettingsError : text;
  WalletAccountCounterMismatch;
  TooManyControllers;
  CkbtcError : CkbtcError;
  WasmNotLoaded;
  ExecutionError : text;
};
type WalletSettings = record {
  controllers : vec Controller;
  initialised : bool;
  metadata : vec record { text; text };
};
type WasmDetails = record { hash : vec nat8; size : nat64 };
service : () -> {
  account_add_pending : (text, ChainEnum, PendingEnum) -> ();
  account_balance : (text, ChainEnum) -> (nat);
  account_btc_fees : (BtcNetwork, nat8) -> (nat64);
  account_check_pending : (text, ChainEnum, nat64) -> (vec UtxoStatus);
  account_create : (opt Environment, opt text) -> ();
  account_create_address : (text, ChainEnum) -> ();
  account_hide : (text) -> ();
  account_remove : (text) -> ();
  account_remove_address : (text, ChainEnum) -> ();
  account_remove_pending : (text, ChainEnum, nat64) -> ();
  account_rename : (text, text) -> ();
  account_restore : (Environment, nat64) -> ();
  account_send : (text, ChainEnum, text, nat64) -> (SendResult);
  account_swap_btc_to_ckbtc : (text, BtcNetwork, nat64) -> (BtcPending);
  account_swap_ckbtc_to_btc : (text, BtcNetwork, text, nat64) -> (nat64);
  account_top_up_and_notify : (text, Tokens, opt principal) -> (Result_1);
  add_controllers : (principal, opt text) -> (Result_2);
  add_setting : (text, text) -> ();
  canister_cycle_balance : () -> (nat) query;
  canister_version : () -> (nat64) query;
  get_account : (text) -> (WalletAccount) query;
  get_account_count : () -> (nat64) query;
  get_account_counters : () -> (AccountsNonce) query;
  get_account_view : (text) -> (WalletAccountView) query;
  get_account_views : () -> (vec WalletAccountView) query;
  get_addresses : (text) -> (vec record { ChainEnum; text }) query;
  init_wallet : (vec record { text; text }, vec principal) -> ();
  load_wasm : (vec nat8) -> (nat64);
  name : () -> (text) query;
  remove_setting : (text) -> ();
  reset_accounts : () -> ();
  retrieve_btc_status : (Minter, nat64) -> (RetrieveBtcStatus) query;
  setting_and_signer : () -> (WalletSettings) query;
  status : () -> (WalletCanisterStatus);
  unload_wasm : () -> (nat64);
  update_controllers : (vec principal) -> (Result_2);
  upgrage_wallet : () -> ();
  version : () -> (text) query;
  wasm_details : () -> (WasmDetails) query;
  wasm_hash : () -> (vec nat8) query;
  wasm_hash_string : () -> (text) query;
}