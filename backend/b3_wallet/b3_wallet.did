type AccountsCounter = record {
  staging : nat64;
  production : nat64;
  development : nat64;
};
type AddSigner = record {
  threshold : opt nat8;
  name : opt text;
  role : Roles;
  signer_id : principal;
  expires_at : opt nat64;
};
type BitcoinError = variant {
  InvalidAddress : text;
  NoUtxos;
  InsufficientBalance : record { nat64; nat64 };
  InvalidFeePercentile : text;
  GetBalance : text;
  FeeTooHigh : record { nat64; nat64 };
  InvalidPublicKey : text;
  GetFeeRate : text;
  GetCurrentFeePercentiles : text;
  InvalidChain : text;
  Signature : text;
  InvalidNetworkAddress : text;
  GetUtxos : text;
  SendRawTransaction : text;
  SendTransaction : text;
  SwapToCkbtc : text;
};
type BtcChain = record { address : text; btc_network : Minter };
type BtcNetwork = variant { Mainnet; Regtest; Testnet };
type BtcTransfer = record {
  to : text;
  account_id : text;
  network : Minter;
  amount : nat64;
};
type CanisterSettings = record {
  freezing_threshold : opt nat;
  controllers : opt vec principal;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type Chain = variant {
  EvmChain : EvmChain;
  BtcChain : BtcChain;
  IcpChain : IcpChain;
  IcrcChain : IcrcChain;
  CkbtcChain : CkbtcChain;
};
type ChainEnum = variant {
  BTC : Minter;
  EVM : nat64;
  ICP;
  ICRC : principal;
  CKBTC : Minter;
};
type CkbtcChain = record {
  fee : opt nat;
  pending : opt text;
  memo : opt vec nat8;
  minter : Minter;
  ledger : principal;
  account : ICRCAccount;
  created_at_time : opt nat64;
};
type CkbtcError = variant {
  MinterError : MinterError;
  SendToInvalidAddress : text;
  UpdateBalanceError : UpdateBalanceError;
  IcrcError : IcrcError;
  CkbtcGetBtcAddressError : text;
  CkbtcSwapToBtcError : text;
  ICRC1TransferError : ICRC1TransferError;
};
type ConsentMessage = record { method : text; message : text };
type CreateAccount = record { env : opt Environment; name : opt text };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type Environment = variant { Production; Development; Staging };
type EvmChain = record { chain_id : nat64; address : text };
type EvmContractDeployed = record {
  transaction : EvmTransfered;
  contract_address : text;
};
type EvmDeployContract = record {
  account_id : text;
  hex_byte_code : vec nat8;
  max_priority_fee_per_gas : opt nat64;
  max_fee_per_gas : opt nat64;
  chain_id : nat64;
  nonce : nat64;
  gas_limit : opt nat64;
};
type EvmError = variant {
  InvalidMessage : text;
  InvalidSignature : text;
  InvalidPublicKey : text;
  InvalidRecoveryId : text;
  InvalidTransactionType;
  NotSignedTransaction;
};
type EvmSignMessage = record {
  account_id : text;
  chain_id : nat64;
  message : vec nat8;
};
type EvmSignRawTransaction = record {
  account_id : text;
  hex_raw_tx : vec nat8;
  chain_id : nat64;
};
type EvmSignTranscation = record {
  account_id : text;
  transaction : EvmTransaction;
  chain_id : nat64;
};
type EvmTransaction = variant {
  EvmTransaction1559 : EvmTransfered;
  EvmTransaction2930 : EvmTransaction2930;
  EvmTransactionLegacy : EvmTransactionLegacy;
};
type EvmTransaction1559 = record {
  r : text;
  s : text;
  v : text;
  to : text;
  value : nat64;
  max_priority_fee_per_gas : nat64;
  data : text;
  max_fee_per_gas : nat64;
  chain_id : nat64;
  nonce : nat64;
  gas_limit : nat64;
  access_list : vec record { text; vec text };
};
type EvmTransaction2930 = record {
  r : text;
  s : text;
  v : text;
  to : text;
  value : nat64;
  data : text;
  chain_id : nat64;
  nonce : nat64;
  gas_limit : nat64;
  access_list : vec record { text; vec text };
  gas_price : nat64;
};
type EvmTransactionLegacy = record {
  r : text;
  s : text;
  v : text;
  to : text;
  value : nat64;
  data : text;
  chain_id : nat64;
  nonce : nat64;
  gas_limit : nat64;
  gas_price : nat64;
};
type EvmTransfer = record {
  to : text;
  account_id : text;
  value : nat64;
  max_priority_fee_per_gas : opt nat64;
  max_fee_per_gas : opt nat64;
  chain_id : nat64;
  nonce : nat64;
  gas_limit : opt nat64;
};
type EvmTransferErc20 = record {
  account_id : text;
  value : nat64;
  max_priority_fee_per_gas : opt nat64;
  max_fee_per_gas : opt nat64;
  chain_id : nat64;
  address : text;
  nonce : nat64;
  gas_limit : opt nat64;
  contract_address : text;
};
type EvmTransfered = record {
  r : text;
  s : text;
  v : text;
  to : text;
  value : nat64;
  max_priority_fee_per_gas : nat64;
  data : text;
  max_fee_per_gas : nat64;
  chain_id : nat64;
  nonce : nat64;
  gas_limit : nat64;
  access_list : vec record { text; vec text };
};
type ExecutionResult = variant {
  AccountCreated : CreateAccount;
  CanisterTopUped : nat;
  BtcTransfered : text;
  IcpTransfered : nat64;
  AccountRenamed : RenameAccount;
  EvmContractDeployed : EvmContractDeployed;
  SignerRemoved : RemoveSigner;
  EvmTransfered : EvmTransfered;
  SignerThresholdUpdated : UpdateSignerThreshold;
  AccountHidden : HideAccount;
  EvmMessageSigned : vec nat8;
  CanisterSettingsUpdated : UpdateCanisterSettings;
  SignerAdded : AddSigner;
  CanisterUpgraded : UpgradeCanister;
  EvmTransactionSigned : EvmTransaction;
  AccountUnhidden : HideAccount;
  AccountRemoved : HideAccount;
};
type GetUtxosResponse = record {
  next_page : opt vec nat8;
  tip_height : nat32;
  tip_block_hash : vec nat8;
  utxos : vec Utxo;
};
type HideAccount = record { account_id : text };
type ICRC1MetadataValue = variant {
  Int : int;
  Nat : nat;
  Blob : vec nat8;
  Text : text;
};
type ICRC1TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type ICRCAccount = record { owner : principal; subaccount : opt vec nat8 };
type ICRCAccountError = variant {
  BadChecksum;
  InvalidFormat;
  InvalidSubaccount : text;
  InvalidPrincipal : text;
  Malformed : text;
  NotCanonical;
  HexDecode : text;
};
type IcpChain = record {
  fee : Tokens;
  memo : nat64;
  subaccount : vec nat8;
  created_at_time : opt Timestamp;
};
type IcpError = variant { CallError : text };
type IcpTransfer = record {
  to : vec nat8;
  fee : opt Tokens;
  account_id : text;
  memo : opt nat64;
  amount : Tokens;
};
type IcrcChain = record {
  fee : opt nat;
  metadata : vec record { text; ICRC1MetadataValue };
  memo : opt vec nat8;
  canister_id : principal;
  subaccount : vec nat8;
  created_at_time : opt nat64;
};
type IcrcError = variant {
  CallError : text;
  ICRC1TransferError : ICRC1TransferError;
};
type Ledger = record {
  subaccount : vec nat8;
  ecdsa : opt vec nat8;
  chains : vec record { ChainEnum; Chain };
};
type LedgerError = variant {
  ICRCAccountError : ICRCAccountError;
  EvmError : EvmError;
  IcpError : IcpError;
  InvalidEcdsaPublicKey;
  BitcoinError : BitcoinError;
  GenerateError : text;
  IcrcError : IcrcError;
  MissingEcdsaPublicKey;
  MissingAddress;
  CallError : text;
  EcdsaPublicKeyError : text;
  CkbtcError : CkbtcError;
  EcdsaPublicKeyAlreadySet;
};
type Minter = variant { Mainnet; Regtest; Testnet };
type MinterError = variant {
  UpdateBalanceError : UpdateBalanceError;
  CallError : text;
  RetrieveBtcError : RetrieveBtcError;
  GetWithdrawalAccountError : text;
  RetrieveBtcStatusError : text;
  GetBtcAddressError : text;
};
type OutPoint = record { txid : vec nat8; vout : nat32 };
type Outpoint = record { txid : vec nat8; vout : nat32 };
type PendingRequest = record {
  id : nat64;
  responses : vec record { principal; RequestResponse };
  request : Request;
  role : Roles;
  deadline : nat64;
  consent_message : ConsentMessage;
};
type ProcessedRequest = record {
  status : RequestStatus;
  method : text;
  request : PendingRequest;
  error : opt RequestError;
  message : opt ExecutionResult;
  timestamp : nat64;
};
type RemoveSigner = record { signer_id : principal };
type RenameAccount = record { account_id : text; new_name : text };
type Request = variant {
  UnhideAccount : HideAccount;
  EvmDeployContract : EvmDeployContract;
  AddSigner : AddSigner;
  IcpTransfer : IcpTransfer;
  EvmSignRawTransaction : EvmSignRawTransaction;
  EvmSignMessage : EvmSignMessage;
  UpdateCanisterSettings : UpdateCanisterSettings;
  RenameAccount : RenameAccount;
  TopUpCanister : TopUpCanister;
  EvmSignTranscation : EvmSignTranscation;
  EvmTransferErc20 : EvmTransferErc20;
  HideAccount : HideAccount;
  UpgradeCanister : UpgradeCanister;
  BtcTransfer : BtcTransfer;
  RemoveAccount : HideAccount;
  CreateAccount : CreateAccount;
  EvmTransfer : EvmTransfer;
  RemoveSigner : RemoveSigner;
  UpdateSignerThreshold : UpdateSignerThreshold;
};
type RequestError = variant {
  RequestAlreadySigned : text;
  WasmNotSet;
  InvalidController;
  InvalidAmount;
  SneakyMessage;
  EvmError : EvmError;
  InvalidChainId : record { nat64; nat64 };
  AccountIsHidden;
  SignerRoleNotAuthorized : record { text; text };
  AccountIsNotHidden;
  RequestExpired;
  FeeIsZero;
  InvalidTransaction;
  AmountIsZero;
  SignerRoleNotFound : record { text; text };
  SignerAlreadyExists : text;
  InvalidThreshold;
  SignerDoesNotExist : text;
  LedgerError : LedgerError;
  RequestAlreadyProcessed : nat64;
  WalletError : WalletError;
  AccountDoesNotExist;
  RequestNotFound : nat64;
  InvalidRequest;
  RequestRejected;
  ChainIdNotInitialized;
  SignerNotFound : text;
  ExecutionError : text;
  InvalidWasmHash;
};
type RequestResponse = variant { Reject; Confirm };
type RequestStatus = variant { Fail; Success; Pending };
type Result = variant { Ok : vec UtxoStatus; Err : UpdateBalanceError };
type RetrieveBtcError = variant {
  MalformedAddress : text;
  GenericError : record { error_message : text; error_code : nat64 };
  TemporarilyUnavailable : text;
  AlreadyProcessing;
  AmountTooLow : nat64;
  InsufficientFunds : record { balance : nat64 };
};
type RetrieveBtcStatus = variant {
  Signing;
  Confirmed : record { txid : vec nat8 };
  Sending : record { txid : vec nat8 };
  AmountTooLow;
  Unknown;
  Submitted : record { txid : vec nat8 };
  Pending;
};
type Roles = variant { User; Canister; Admin; Threshold };
type Signer = record {
  threshold : opt nat8;
  metadata : vec record { text; text };
  name : opt text;
  role : Roles;
  expires_at : opt nat64;
};
type Timestamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type TopUpCanister = record {
  fee : opt Tokens;
  account_id : text;
  canister_id : opt principal;
  amount : Tokens;
};
type UpdateBalanceError = variant {
  GenericError : record { error_message : text; error_code : nat64 };
  TemporarilyUnavailable : text;
  AlreadyProcessing;
  NoNewUtxos : record {
    required_confirmations : nat32;
    current_confirmations : opt nat32;
  };
};
type UpdateCanisterSettings = record {
  canister_id : principal;
  settings : CanisterSettings;
};
type UpdateSignerThreshold = record { threshold : nat8; signer_id : principal };
type UpgradeCanister = record { wasm_hash_string : text; wasm_version : text };
type Utxo = record { height : nat32; value : nat64; outpoint : Outpoint };
type UtxoFilter = variant { page : vec nat8; min_confirmations : nat32 };
type UtxoStatus = variant {
  ValueTooSmall : Utxo_1;
  Tainted : Utxo_1;
  Minted : record { minted_amount : nat64; block_index : nat64; utxo : Utxo_1 };
  Checked : Utxo_1;
};
type Utxo_1 = record { height : nat32; value : nat64; outpoint : OutPoint };
type WalletAccount = record {
  id : text;
  metadata : vec record { text; text };
  name : text;
  hidden : bool;
  ledger : Ledger;
};
type WalletAccountView = record {
  id : text;
  metadata : vec record { text; text };
  name : text;
  hidden : bool;
  addresses : vec record { ChainEnum; text };
  environment : Environment;
};
type WalletCanisterStatus = record {
  canister_id : principal;
  status_at : nat64;
  version : text;
  canister_status : CanisterStatusResponse;
  account_status : AccountsCounter;
};
type WalletError = variant {
  InvalidMessageLength;
  InvalidAddress;
  CannotRemoveDefaultAccount;
  DeadlineExceeded;
  InvalidController;
  WalletAccountNotExists;
  CyclesMintingError : text;
  InvalidTx : text;
  EvmError : EvmError;
  IcpError : IcpError;
  MinterError : text;
  SignerRoleNotAuthorized : text;
  RequestNotExists;
  PublicKeyError : text;
  NoUtxos;
  UnknownError;
  InvalidEcdsaPublicKey;
  BitcoinError : BitcoinError;
  GenerateError : text;
  IcrcError : IcrcError;
  SignerRoleNotFound : record { text; text };
  NotifyTopUpError : text;
  CkbtcPendingBalance : text;
  MissingEcdsaPublicKey;
  CkbtcNotInitialized;
  InvalidMsg : text;
  InvalidToken;
  SignerAlreadyExists : text;
  MissingSighashType;
  WalletAccountAlreadyExists;
  MissingAddress;
  AlreadySigned : text;
  SignerDoesNotExist : text;
  LedgerError : LedgerError;
  ChainTypeMismatch;
  RecoverableSignatureError : text;
  InvalidAccountIdentifier;
  UpdateSettingsError : text;
  SignError : text;
  CkbtcSwapToBtcError : text;
  WalletAccountCounterMismatch;
  BitcoinGetAddressError;
  InvalidRequest;
  CallerIsNotOwner;
  ChainNotFound;
  InvalidNetwork;
  InvalidNetworkAddress;
  MissingWitnessScript;
  SignerNotFound : text;
  Processing;
  CkbtcUpdateBalance : text;
  EcdsaPublicKeyError : text;
  CkbtcError : CkbtcError;
  WasmNotLoaded;
  NotSignedTransaction;
  ICRC1Error : text;
  ExecutionError : text;
  TransactionTooOld : nat64;
  CanisterStatusError : text;
  EcdsaPublicKeyAlreadySet;
  ICRC1CallError : text;
};
service : () -> {
  account_balance : (text, ChainEnum) -> (nat);
  account_balance_btc : (text, BtcNetwork, opt nat32) -> (nat64);
  account_btc_fees : (BtcNetwork, nat8) -> (nat64);
  account_btc_utxos : (text, BtcNetwork, opt UtxoFilter) -> (GetUtxosResponse);
  account_ckbtc_balance : (text, BtcNetwork) -> (nat);
  account_create : (opt Environment, opt text) -> ();
  account_generate_address : (text, ChainEnum) -> ();
  account_hide : (text) -> ();
  account_icp_balance : (text) -> (nat);
  account_icrc_balance : (text, principal) -> (nat);
  account_remove : (text) -> ();
  account_remove_address : (text, ChainEnum) -> ();
  account_rename : (text, text) -> ();
  account_restore : (Environment, nat64) -> ();
  account_send : (text, ChainEnum, text, nat64) -> ();
  account_send_btc : (text, BtcNetwork, text, nat64) -> (text);
  account_send_icp : (text, text, Tokens, opt Tokens, opt nat64) -> (nat64);
  account_swap_btc_to_ckbtc : (text, BtcNetwork, nat64) -> (text);
  account_swap_ckbtc_to_btc : (text, BtcNetwork, text, nat64) -> (text);
  account_top_up_and_notify : (text, Tokens, opt principal, opt Tokens) -> (
      nat,
    );
  account_update_balance : (text, BtcNetwork) -> (Result);
  canister_cycle_balance : () -> (nat) query;
  canister_version : () -> (nat64) query;
  get_account : (text) -> (WalletAccount) query;
  get_account_count : () -> (nat64) query;
  get_account_counters : () -> (AccountsCounter) query;
  get_account_view : (text) -> (WalletAccountView) query;
  get_account_views : () -> (vec WalletAccountView) query;
  get_addresses : (text) -> (vec record { ChainEnum; text }) query;
  get_pending_list : () -> (vec PendingRequest) query;
  get_processed : (nat64) -> (ProcessedRequest) query;
  get_processed_list : () -> (vec ProcessedRequest) query;
  get_signers : () -> (vec record { principal; Signer }) query;
  load_wasm : (vec nat8) -> (nat64);
  request_account_rename : (RenameAccount, opt nat64) -> (nat64);
  request_add_signer : (AddSigner, opt nat64) -> (nat64);
  request_create_account : (CreateAccount, opt nat64) -> (nat64);
  request_delete_account : (HideAccount, opt nat64) -> (nat64);
  request_maker : (Request, opt nat64) -> (nat64);
  request_response : (nat64, RequestResponse) -> (ProcessedRequest);
  request_sign_message : (text, vec nat8) -> (vec nat8);
  request_sign_transaction : (text, vec nat8, nat64) -> (vec nat8);
  request_transfer_btc : (BtcTransfer, opt nat64) -> (nat64);
  request_transfer_icp : (IcpTransfer, opt nat64) -> (nat64);
  request_update_settings : (UpdateCanisterSettings, opt nat64) -> (nat64);
  reset_wallet : () -> ();
  retrieve_btc_status : (Minter, nat64) -> (RetrieveBtcStatus) query;
  signer_add : (principal, Roles) -> (vec record { principal; Signer });
  signer_remove : (principal) -> (vec record { principal; Signer });
  status : () -> (WalletCanisterStatus);
  unload_wasm : () -> (nat64);
  upgrage_wallet : () -> ();
  validate_signer : (principal) -> (bool) query;
  version : () -> (text) query;
  wasm_hash : () -> (vec nat8) query;
  wasm_hash_string : () -> (text) query;
}