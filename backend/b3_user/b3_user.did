type Account = record {
  id : text;
  name : text;
  ledger : Ledger;
  canisters : vec record { principal; Allowance };
  requests : vec record { principal; SignRequest };
  signed : SignedTransaction
};
type Allowance = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  limit : opt nat8;
  expires_at : opt nat64
};
type EvmTransaction = record {
  r : text;
  s : text;
  v : text;
  to : text;
  transaction_type : EvmTransactionType;
  value : nat64;
  max_priority_fee_per_gas : opt nat64;
  data : text;
  max_fee_per_gas : opt nat64;
  chain_id : nat64;
  nonce : nat64;
  gas_limit : nat64;
  access_list : opt vec record { text; vec text };
  gas_price : opt nat64
};
type EvmTransactionType = variant { EIP1559; EIP2930; Legacy };
type Ledger = record { subaccount : vec nat8; public_keys : PublicKeys };
type PublicKeys = record {
  ecdsa : opt vec nat8;
  addresses : vec record { text; text };
  identifier : vec nat8
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject
};
type Result = variant {
  Ok : vec record { text; text };
  Err : record { RejectionCode; text }
};
type Result_1 = variant {
  Ok : vec record { principal; Allowance };
  Err : record { RejectionCode; text }
};
type Result_2 = variant {
  Ok : SignRequest;
  Err : record { RejectionCode; text }
};
type Result_3 = variant {
  Ok : SignedTransaction;
  Err : record { RejectionCode; text }
};
type Result_4 = variant { Ok : Account; Err : record { RejectionCode; text } };
type SignRequest = record {
  transaction : EvmTransaction;
  deadline : nat64;
  chain_id : nat64;
  message : vec nat8
};
type SignedTransaction = record { data : vec nat8; timestamp : nat64 };
service : {
  account_addresses : (text) -> (Result) query;
  account_connected_canisters : (text) -> (Result_1) query;
  account_sign_requests : (text, principal) -> (Result_2) query;
  account_signed_transaction : (text) -> (Result_3) query;
  get_account : (text) -> (Result_4) query;
  get_accounts : () -> (vec Account) query;
  get_number_of_accounts : () -> (nat8) query
}
