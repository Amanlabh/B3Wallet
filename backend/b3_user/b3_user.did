type Account = record {
  id : text;
  keys : Keys;
  name : text;
  ecdsa : Ecdsa;
  canisters : vec record { principal; Allowance };
  requests : vec SignRequest;
  signed : SignedTransaction;
};
type Allowance = record {
  updated_at : nat64;
  metadata : vec record { text; text };
  created_at : nat64;
  limit : opt nat8;
  expires_at : opt nat64;
};
type Ecdsa = record { env : Environment; path : vec nat8 };
type Environment = variant { Production; Development; Staging };
type Keys = record { address : text; bytes : vec nat8 };
type Result = variant { Ok : Account; Err : text };
type Result_1 = variant { Ok : SignedTransaction; Err : text };
type SignRequest = record {
  id : nat64;
  destination : principal;
  public_key : Keys;
  data : vec nat8;
  deadline : nat64;
  cycles : nat64;
  chain_id : nat64;
  nonce : nat64;
};
type SignedTransaction = record { data : vec nat8; timestamp : nat64 };
service : () -> {
  change_owner : (principal) -> ();
  create_account : (opt Environment, opt text) -> (Result);
  get_account : (text) -> (Account) query;
  get_accounts : () -> (vec Account) query;
  get_caller : () -> (principal) query;
  get_owner : () -> (principal) query;
  get_public_key : (text) -> (Keys) query;
  get_signed : (text) -> (SignedTransaction) query;
  number_of_accounts : () -> (nat8) query;
  sign_transaction : (text, nat64, vec nat8) -> (Result_1);
}