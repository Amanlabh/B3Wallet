type AppBug = record {
  logs : vec text;
  name : text;
  canister_id : principal;
  description : text;
  version : text;
};
type CanisterChange = record {
  timestamp_nanos : nat64;
  canister_version : nat64;
  origin : CanisterChangeOrigin;
  details : CanisterChangeDetails;
};
type CanisterChangeDetails = variant {
  creation : CreationRecord;
  code_deployment : CodeDeploymentRecord;
  controllers_change : CreationRecord;
  code_uninstall;
};
type CanisterChangeOrigin = variant {
  from_user : FromUserRecord;
  from_canister : FromCanisterRecord;
};
type CanisterInfoResponse = record {
  controllers : vec principal;
  module_hash : opt vec nat8;
  recent_changes : vec CanisterChange;
  total_num_changes : nat64;
};
type CanisterInstallMode = variant { reinstall; upgrade; install };
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type CodeDeploymentRecord = record {
  mode : CanisterInstallMode;
  module_hash : vec nat8;
};
type CreationRecord = record { controllers : vec principal };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type FromCanisterRecord = record {
  canister_version : opt nat64;
  canister_id : principal;
};
type FromUserRecord = record { user_id : principal };
type LoadRelease = record { total : nat64; version : text; chunks : nat64 };
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type Release = record {
  features : vec text;
  date : nat64;
  name : text;
  size : nat64;
  version : text;
  deprecated : bool;
};
type ReleaseArgs = record {
  features : vec text;
  name : text;
  size : nat64;
  version : text;
};
type Result = variant { Ok : User; Err : text };
type SystemCanisterStatus = record {
  user_status : nat64;
  status_at : nat64;
  version : text;
  canister_status : CanisterStatusResponse;
};
type User = record {
  updated_at : nat64;
  metadata : vec record { text; Value };
  created_at : nat64;
  canisters : vec principal;
};
type UserCanisterStatus = record {
  version : text;
  canister_status : CanisterStatusResponse;
};
type UserStatus = variant {
  Unregistered;
  SingleCanister : principal;
  MultipleCanister : vec principal;
  Registered;
};
type Value = variant {
  Int : int;
  Map : vec record { text; Value };
  Nat : nat;
  Nat64 : nat64;
  Blob : vec nat8;
  Text : text;
  Array : vec Value;
};
service : () -> {
  add_app : (principal) -> ();
  clear_bugs : (principal) -> ();
  create_app_canister : () -> (Result);
  deprecate_release : (text) -> (Release);
  get_app_version : (principal) -> (text) composite_query;
  get_bugs : (principal) -> (vec AppBug) query;
  get_canister_info : (principal) -> (CanisterInfoResponse);
  get_canisters : () -> (vec principal) query;
  get_create_canister_app_cycle : () -> (nat) query;
  get_latest_release : () -> (Release) query;
  get_release : (text) -> (Release) query;
  get_release_by_hash_string : (vec nat8) -> (Release) query;
  get_states : () -> (User) query;
  get_user_app_status : (principal) -> (UserCanisterStatus);
  get_user_ids : () -> (vec vec nat8) query;
  get_user_states : () -> (vec User) query;
  get_user_status : () -> (UserStatus) query;
  install_app : (principal) -> (Result);
  load_release : (vec nat8, ReleaseArgs) -> (LoadRelease);
  release_wasm_hash : () -> (vec record { text; vec nat8 }) query;
  releases : () -> (vec Release) query;
  remove_app : (principal) -> ();
  remove_latest_release : () -> ();
  remove_release : (text) -> (Release);
  remove_user : (principal) -> ();
  report_bug : (AppBug) -> ();
  status : () -> (SystemCanisterStatus);
  update_release : (ReleaseArgs) -> ();
  version : () -> (text) query;
}
